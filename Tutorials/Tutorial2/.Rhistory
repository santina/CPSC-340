install.packages("swirl")
library("swirl")
swirl()
library(datasets)
data(iris)
?iris
head(iris)
mean(iris$Sepal.Length)
?runif
apply(iris[, 1:4], 2, mean)
a<- array(rnorm(2*2*10), c(2,2,10))
a
a<- array(rnorm(2*2*10), c(2,2,10, 1))
a
a<- array(rnorm(2*2*10), c(2,2,10))
?rowMeans
?gl
gl(2,2,20)
gl(2,1,20)
gl(1,2,20)
str(split)
str(tapply)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
?tapply
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
f<-tapply(mtcars$hp, mtcars$cyl, mean)
f$4
f[1]
f[2]
f[3]
f[3]-f[1]
?lm
debug(ls)
ls
?ls
mean(iris$Sepal.Length)
head(iris)
tapply(iris$Sepal.Length, iris$Sepal.Species, mean)
tapply(iris$Sepal.Length, iris$Sepal.Species, means)
tapply(iris$Sepal.Length, iris$Species, means)
tapply(iris$Sepal.Length, iris$Species, mean)
with(mtcars, tapply(mpg, cyl, mean))
?solve
1%*%1
1%*%2
a%*%x
?outer
set.seed(1)
rpois(5,2)
?rpois
?rnorm
a
clear
seq(1,10)
date()
ls()
q()
x<- 1
(y<-2)
ls()
q()
getwd()
library("swirl")
swirl()
?InstallCourses
swirl()
0
quit()
library("swirl")
rm(list=ls())
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
bye()
install_from_swirl("R Programming Alt")
swirl()
dim(my_vector)
attribute(my_vector)
attributes(my_vector)
bye()
swirl()
bye()
swirl()
install_from_swirl("Data Analysis")
install_from_swirl("Mathematical Biostatistics Boot Camp")
install_from_swirl("Open Intro"")
)
""
install_from_swirl("Open Intro")
swirl()
my_vector
bye()
swirl()
bye()
swirl()
5+7
x  <- 5+7
X
X
X
x
y <- x-3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
c(z, 555)
c(z, 555, z)
z*2+100
my_sqrt  <- sqrt(z-1)
my_sqrt
my_div  <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
clear
rm(ls())
ls()
?rm
rm(list=ls())
getwd()
a<-2
b <- 3
sig_sq <- 0.5
x <- runif(40)
y <- a+b*x+rnom(40,sd=sqrt(sig_sq))
y <- a+b*x+rnorm(40,sd=sqrt(sig_sq))
(avg_x  <- mean(X))
(avg_x  <- mean(x))
write(avg_x,"avg_x.txt")
plot(x,y)
abline(a,b,col="purple")
dev.print(pdf,"toy_line_plot.pdf")
save.image("~/toy-line.r.RData")
rm(ls=ls())
rm(list=ls())
a <- 2
b <- -3
sig_sq <- 0.5
x <- runif(40)
y <- a+b*x+rnorm(40,sd=sqrt(sig_sq))
(avg_x <- mean(x))
write(avg_x,"avg_x.txt")
plot(x,y)
abline(a,b,col="purple")
dev_print(pdf,"toy_line_plot.pdf")
dev.print(pdf,"toy_line_plot.pdf")
savehistory("~/toy-line.r.RData")
swirl()
library(swirl)
swirl()
x
x[1,10]
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[1(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
c[c(-2,-10)]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect  <- c(11,2,NA)
vect2  <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
library(datasets)
data(iris)
?iris
mean(iris[iris$species == "virginia", iris$Sepal.Length])
a   <- iris[iris$species == "virginia",]
mean(a[, iris$Sepal.Length])
mean(airis$Sepal.Length, ])
mean(a[iris$Sepal.Length, ])
mean(a[,iris$Sepal.Length ])
a
a   <- iris[, iris$species == "virginia"]
a
a   <- iris[, iris$species == "virginica"]
a
head(iris)
a   <- iris[, iris$Species == "virginica"]
a   <- iris[ iris$Species == "virginica", ]
a
mean(a[,iris$Sepal.Length ])
mean(a[iris$Sepal.Length, ])
mean(a[a$Sepal.Length, ])
mean(a[,a$Sepal.Length])
mean(a$Sepal.Length)
setwd("C:/Users/Santina Lin/Desktop/CPSC340/Tutorial2")
library(SnowballC)
library(tm)
library(rpart) #need this for classification
train<- read.table("epinions-train.csv", sep = ",", header = TRUE)
test<- read.table("epinions-test.csv", sep = ",", header = TRUE)
#building the training and test set
set.seed(123) #ensure reproducibility
data_set  <- train[sample(nrow(train), 150), ] #randomy select 150 items from the training dataset
test_set  <- data_set[100:150,] #same as rain_test_set  <-  data_set, 50 items for testing
train_set  <- data_set[1:100,] # get 100 items to train the model
#train_set <- train[sample(nrow(train), 100),]
#test_set <- test[sample(nrow(test), 50),]
#now we combine the two datasets together
train_test_set <- rbind(train_set,test_set)
#train_test_set$class   #basically you have two components in this dataframe
#train_test_set$text
#goal to predict via decision tree classifer whether given doc is about auto or camera
#turn the data frame's text component into a corpus
train_test_corpus <- Corpus(VectorSource(train_test_set$text))
#preprocess the corpus (content transformer is used to remove some error message whch idk why happened)
train_test_corpus <- tm_map(train_test_corpus, content_transformer(tolower))
train_test_corpus <- tm_map(train_test_corpus, content_transformer(removePunctuation))
train_test_corpus <- tm_map(train_test_corpus, content_transformer(removeWords) , c(stopwords('english')))
train_test_corpus[[1]]
train_test_corpus[1]
train_test_corpus[[1]
]
train_test_corpus <- tm_map(train_test_corpus, stripWhitespace)
train_test_corpus[[1]]
DTM_train_test <- DocumentTermMatrix(train_test_corpus,control=list(stemming = TRUE)) #has error
DTM_train_test
train_test_corpus
b  <-  DocumentTermMatrix(train_test_corpus)
b
26536/938807
classification <- c(train_test_set$class)
train_test_df_withclass <- cbind( train_test_dataframe, classification)
train_test_dataframe <- as.data.frame(inspect( DTM_train_test ))
train_test_df_withclass
classification <- c(train_test_set$class)
train_test_df_withclass <- cbind( train_test_dataframe, classification)
train_df_withclass <- head (train_test_df_withclass,10)
train_df_withclass <- head (train_test_df_withclass,100)
test_df_withclass <- tail (train_test_df_withclass,50)
dt_model <- rpart(classification ~ .,train_df_withclass,method="class")
prediction <- predict(dt_model, test_df_withclass, type="class")
table (test_df_withclass$classification,prediction)
dt_model2 <- rpart(classification ~ camera+car,train_df_withclass,method="class")
prediction2 <- predict(dt_model2, test_df_withclass, type="class")
dt_table2 <- table (test_df_withclass$classification,prediction2) #this is the confusion matrix
dt_table2
dt_model <- rpart(classification ~ also,train_df_withclass,method="class")
prediction <- predict(dt_model, test_df_withclass,type="class")
table (test_df_withclass$classification,prediction)
?anova
?poisson
dt_model <- rpart(classification ~ time,train_df_withclass,method="anova")
prediction <- predict(dt_model, test_df_withclass,type="vector")
table (test_df_withclass$classification,prediction)
dt_model <- rpart(classification ~ time,train_df_withclass,method="anova")
prediction <- predict(dt_model, test_df_withclass,type="class")
prediction <- predict(dt_model, test_df_withclass,type="vector")
table (test_df_withclass$classification,prediction)
source('~/.active-rstudio-document')
dt_model <- rpart(classification ~ time,train_df_withclass,method="anova")
prediction <- predict(dt_model, test_df_withclass,type="vector")
db_table4 <- table (test_df_withclass$classification,prediction)
db_table4
dt_model <- rpart(classification ~ camera+car,train_df_withclass,method="anova")
prediction <- predict(dt_model, test_df_withclass,type="vector")
db_table4 <- table (test_df_withclass$classification,prediction)
db_table4
DTM_train_test <- DocumentTermMatrix(train_test_corpus,control=list(stemming = TRUE))
train_test_dataframe <- as.data.frame(inspect( DTM_train_test ))
train_test_dataframe <- as.data.frame(DTM_train_test)
train_test_dataframe <- as.data.frame(inspect( DTM_train_test, echo=FALSE))
dt_mode_a1 <- rpart(classification ~ time,train_df_withclass,method="anova")
prediction_a1 <- predict(dt_model_a1, test_df_withclass,type="vector")
db_table_a1 <- table (test_df_withclass$classification,prediction_a1)
dt_mode_a1 <- rpart(classification ~ time,train_df_withclass,method="anova")
prediction_a1 <- predict(dt_model_a1, test_df_withclass,type="vector")
dt_model_a1 <- rpart(classification ~ time,train_df_withclass,method="anova")
prediction_a1 <- predict(dt_model_a1, test_df_withclass,type="vector")
db_table_a1 <- table (test_df_withclass$classification,prediction_a1)
db_table_a1
dt_model_a2 <- rpart(classification ~ camera+car,train_df_withclass,method="anova")
prediction_a2 <- predict(dt_model_a2, test_df_withclass,type="vector")
db_table_a2 <- table (test_df_withclass$classification,prediction_a2)
db_table_a2
dt_model_a3 <- rpart(classification ~ .,train_df_withclass,method="anova")
prediction_a3 <- predict(dt_model_a3, test_df_withclass,type="vector")
db_table_a3 <- table (test_df_withclass$classification,prediction_a3)
db_table_a3
dt_model_a1 <- rpart(classification ~ you,train_df_withclass,method="anova")
dt_model_a1 <- rpart(classification ~ also,train_df_withclass,method="anova")
prediction_a1 <- predict(dt_model_a1, test_df_withclass,type="vector")
db_table_a1 <- table (test_df_withclass$classification,prediction_a1)
db_table_a1
dt_model_a1 <- rpart(classification ~ also,train_df_withclass,method="anova")
prediction_a1 <- predict(dt_model_a1, test_df_withclass,type="vector")
table (test_df_withclass$classification,prediction_a1)
prediction_a1
?table
table(prediction_a1)
table(test_df_withclass$classification)
table (test_df_withclass$classification,prediction_a1)
dt_model_p1 <- rpart(classification ~ also,train_df_withclass,method="poisson")
prediction_p1 <- predict(dt_model_p1, test_df_withclass,type="vector")
table (test_df_withclass$classification,prediction_p1)
dt_model_p2 <- rpart(classification ~ camera+car,train_df_withclass,method="poisson")
prediction_p2 <- predict(dt_model_p2, test_df_withclass,type="vector")
table (test_df_withclass$classification,prediction_p2)
dt_model_p3 <- rpart(classification ~ .,train_df_withclass,method="poisson")
prediction_p3 <- predict(dt_model_p3, test_df_withclass,type="vector")
table (test_df_withclass$classification,prediction_p3)
dt_model_e1 <- rpart(classification ~ also,train_df_withclass,method="exp")
?surv
?Surv()
dt_model_a1 <- rpart(classification ~ also,train_df_withclass,method="anova")
prediction_a1 <- predict(dt_model_a1, test_df_withclass,type="vector")
table (test_df_withclass$classification,prediction_a1)
dt_model_p1 <- rpart(classification ~ also,train_df_withclass,method="poisson")
prediction_p1 <- predict(dt_model_p1, test_df_withclass,type="vector")
table (test_df_withclass$classification,prediction_p1)
